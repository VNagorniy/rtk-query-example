import { baseApi } from '@/app/api/baseApi';
import { imagesSchema } from '@/common/schemas';
import type { Images } from '@/common/types';
import { withZodCatch } from '@/common/utils';
import { playlistCreateResponseSchema, playlistsResponseSchema } from '../model/playlists.schemas';
import type { CreatePlaylistArgs, FetchPlaylistsArgs, PlaylistCreatedEvent, PlaylistUpdatedEvent, UpdatePlaylistArgs } from './playlistsApi.types';
import { SOCKET_EVENTS } from '@/common/constants';
import { subscribeToEvent } from '@/common/socket';

export const playlistsApi = baseApi.injectEndpoints({
	endpoints: (build) => ({
		// `query` –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å `get` –∏ —É–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
		//—Ç–∏–ø–∏–∑–∞—Ü–∏—è 1–π –∞—Ä–≥—É–º–µ–Ω—Ç - —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, 2–π –∞—Ä–≥—É–º–µ–Ω—Ç - —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞
		fetchPlaylists: build.query({
			query: (params: FetchPlaylistsArgs) => ({ url: `playlists`, params }),
			...withZodCatch(playlistsResponseSchema),
			keepUnusedDataFor: 0, // üëà –æ—á–∏—Å—Ç–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			async onCacheEntryAdded(_arg, { updateCachedData, cacheDataLoaded, cacheEntryRemoved }) {
				// –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
				await cacheDataLoaded;

				const unsubscribes = [
					subscribeToEvent<PlaylistCreatedEvent>(SOCKET_EVENTS.PLAYLIST_CREATED, (msg) => {
						const newPlaylist = msg.payload.data;
						updateCachedData((state) => {
							state.data.pop();
							state.data.unshift(newPlaylist);
							state.meta.totalCount = state.meta.totalCount + 1;
							state.meta.pagesCount = Math.ceil(state.meta.totalCount / state.meta.pageSize);
						});
					}),
					subscribeToEvent<PlaylistUpdatedEvent>(SOCKET_EVENTS.PLAYLIST_UPDATED, (msg) => {
						const newPlaylist = msg.payload.data;
						updateCachedData((state) => {
							const index = state.data.findIndex((playlist) => playlist.id === newPlaylist.id);
							if (index !== -1) {
								state.data[index] = { ...state.data[index], ...newPlaylist };
							}
						});
					})
				];

				// CacheEntryRemoved —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–µ—à –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
				await cacheEntryRemoved;
				unsubscribes.forEach((unsubscribe) => unsubscribe());
			},
			providesTags: ['Playlist']
		}),
		createPlaylist: build.mutation({
			query: (body: CreatePlaylistArgs) => ({ method: 'post', url: 'playlists', body }),
			...withZodCatch(playlistCreateResponseSchema),
			invalidatesTags: ['Playlist']
		}),
		deletePlaylist: build.mutation<void, string>({
			query: (playlistId) => ({
				url: `playlists/${playlistId}`,
				method: 'delete'
			}),
			invalidatesTags: ['Playlist']
		}),
		updatePlaylist: build.mutation<void, { playlistId: string; body: UpdatePlaylistArgs }>({
			query: ({ playlistId, body }) => ({
				url: `playlists/${playlistId}`,
				method: 'put',
				body
			}),
			async onQueryStarted({ playlistId, body }, { dispatch, queryFulfilled, getState }) {
				const args = playlistsApi.util.selectCachedArgsForQuery(getState(), 'fetchPlaylists');

				// eslint-disable-next-line
				const patchResults: any[] = [];

				args.forEach((arg) => {
					patchResults.push(
						dispatch(
							playlistsApi.util.updateQueryData(
								// –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
								'fetchPlaylists',
								// –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
								{
									pageNumber: arg.pageNumber,
									pageSize: arg.pageSize,
									search: arg.search
								},
								// `updateRecipe` - –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
								(state) => {
									const index = state.data.findIndex((playlist) => playlist.id === playlistId);
									if (index !== -1) {
										state.data[index].attributes = { ...state.data[index].attributes, ...body };
									}
								}
							)
						)
					);
				});

				try {
					await queryFulfilled;
				} catch {
					patchResults.forEach((patchResult) => {
						patchResult.undo();
					});
				}
			},
			invalidatesTags: ['Playlist']
		}),
		uploadPlaylistCover: build.mutation<Images, { playlistId: string; file: File }>({
			query: ({ playlistId, file }) => {
				const formData = new FormData();
				formData.append('file', file);
				return {
					url: `playlists/${playlistId}/images/main`,
					method: 'post',
					body: formData
				};
			},
			...withZodCatch(imagesSchema),
			invalidatesTags: ['Playlist']
		}),
		deletePlaylistCover: build.mutation<void, { playlistId: string }>({
			query: ({ playlistId }) => ({ url: `playlists/${playlistId}/images/main`, method: 'delete' }),
			invalidatesTags: ['Playlist']
		})
	})
});

export const { useFetchPlaylistsQuery, useCreatePlaylistMutation, useDeletePlaylistMutation, useUpdatePlaylistMutation, useUploadPlaylistCoverMutation, useDeletePlaylistCoverMutation } = playlistsApi;
